src/test/isolation/README

アイソレーションテスト
======================

このディレクトリには、PostgreSQLの同時動作の為の一連のテストが含まれています。
これらのテストは複数の同時接続の管理を必要とする複数の相互作用している
トランザクションが必要ですので、通常のpg_regressプログラムを使用して
テストする事は出来ません。名前の"isolation"は、最初の動機はシリアライザブル
分離レベルをテストする事であった事実に由来します; しかし、他の種類の同時動作の
為のテストが追加されました。

テストを実行する為に、あなたはlibpqで求められるデフォルトのポートで
動作しているサーバが必要です。(あなたはこれを制御する為に、PGPORTなどを
環境で設定する事が出来ます。) 次に実行、
    make installcheck
特定のテスト(複数可)を実行するには、あなたは次のような事を行う事が出来ます
    ./pg_isolation_regress fk-contention fk-deadlock
(利用可能なテストを表示する為に、specs/ サブディレクトリを調べて下さい)。

プリペアドトランザクションのテストは、サーバのmax_prepared_transactions
パラメータが少なくとも3に設定する事が必要です; したがって、デフォルトでは
実行されません。テストの実行に含めるのであれば、以下を使用します
    make installcheck-prepared-txns

重複トランザクションのテストを定義する為に、我々はカスタム構文でのテスト仕様
ファイルを使用します、そしてそれは次のセクションで説明されています。新しい
テストを追加するには、specs/ サブディレクトリにspecファイルを置き、
expected/ サブディレクトリに求められる出力を追加し、isolation_scheduleファイルに
テストの名前を追加します。

アイソレーションテスタは、libpqを使用して複数の接続を開く為のプログラムで、
specファイルで指定されたテストを実行します。libpqの接続文字列は、サーバと
接続するデータベースを指定します; 環境変数によって得られるデフォルトとは
別に使用されます。

pg_isolation_regressはpg_regressと似ているツールですが、テストを実行する為に
psqlを使用する代わりにアイソレーションテスタを使用しています。それは
pg_regressと全く同じコマンドライン引数を受け付けます。


テスト仕様書
============

それぞれのアイソレーションテストはspecsサブディレクトリに格納され、仕様
ファイルで定義されています。テスト仕様はこの順に4つのパートから成ります:

setup { <SQL> }

  テストを実行する前に、1つのセッションにだけ既定のSQLブロックが一度実行されます。
  ここで任意のテスト用のテーブルや他に必要なオブジェクトを作成します。このパートは
  省略可能です。必要に応じて、複数の設定ブロックが許可されています; それぞれが
  任意の順序に従って、個別に実行されます。(複数の設定ブロックを可能にする為の
  理由は、各ブロックが単一のPQexec提案として実行されており、そして、VACUUMなどの
  いくつかのステートメントは、その様なブロックで他と組み合わせる事が出来ません。)

teardown { <SQL> }

  テストが終了した後に、ティアダウンSQLブロックが一度実行されます。次の順列の
  準備でクリーンアップする為に、これを使用します, e.g セットアップによって
  作成された全てのテストテーブルを削除します。このパートは省略可能です。

session "<name>"

  通常、specファイルにいくつかの"session"パートがあります。各セッションは、
  独自の接続で実行されます。セッションパートは、3つのパートから構成されています: 
  セットアップ、ティアダウンそして1つまたは複数の"steps"です。セッションごとの
  セットアップとティアダウンパートには、上記のテストごとのセットアップとティア
  ダウンと同じ構文を持っているが、それらは各セッションで実行されます。セット
  アップパートは通常、トランザクションを開始する"BEGIN"コマンドが含まれています。

  各ステップの構文

  step "<name>" { <SQL> }

  <name>がこのステップを特定する名前であり、SQLがステップで実行されるSQLステートメント
  (または、セミコロンによって切り離されたステートメント)です。ステップ名は全体のspec
  ファイルで一意である必要があります。

permutation "<step name>" ...

  順列ラインは、その順序で実行されるステップのリストを指定します。多くの順列行
  でも表示させる事が出来ます。何も順列ラインが与えられていない場合、テスト
  プログラムは自動的に各セッションからステップの全て可能な順序を生成します
  (順序ではいずれかのセッションのステップを実行しています)。手動で指定された
  "permutation"ラインのステップのリストは、実際に使用可能なステップの順列である
  必要は無い事に注意して下さい; 例えばそれはいくつかのステップを何度も繰り返すか
  または他を省くかもしれません。

#で始まる行はコメントと見なされます。

セッションステップの順列ごと(これらは、手動でspecファイルに指定されているか、
自動的に生成されているかどうか)にアイソレーションテスタは主なセットアップパート、
それからセッションごとのセットアップパート、それから選択されたセッションステップ、
それからセッションごとのティアダウン、それから主なティアダウンスクリプトを実行
します。それぞれ選択されたステップは、そのセッションで関連する接続に送信されます。


ブロックコマンドのサポート
==========================

各ステップはアクションが取られるまでブロックするコマンドを含むかもしれません
(大概は、いくつかの他のセッションではそれのブロック解除、またはデッドロックが
発生するステップを実行するでしょう)。この機能を使用するテストは、有効な順列を
手動で指定しなければなりません, i.e. ブロックされたセッションがコマンドを実行
するとは思いません。テストがその規則に従わないのであれば、テストは中止されます。

現在、最大でも1つのステップは、一度待機する事が出来ます。1つのステップが
待機している限り、それ以降の処理が同期完了するまで実行されています。

そのアイソレーションテスタは、pg_locksビューで待機している様に示されて
いる場合に、その表示を見る事でコマンドがブロックされた事を認識する事に
注意して下さい; したがって、ヘビー級のロックに関するブロックのみが検出
されます。
